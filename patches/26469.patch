From 6f9078174996ebb6d2a96cc3ac7b833636008b9f Mon Sep 17 00:00:00 2001
From: Harmen Stoppels <harmenstoppels@gmail.com>
Date: Mon, 4 Oct 2021 15:48:39 +0200
Subject: [PATCH] spack diff two environment lock files

---
 lib/spack/spack/cmd/diff.py       | 95 +++++++++++++++++++++----------
 lib/spack/spack/test/cmd/diff.py  | 28 ++++++++-
 share/spack/spack-completion.bash |  2 +-
 3 files changed, 90 insertions(+), 35 deletions(-)

diff --git a/lib/spack/spack/cmd/diff.py b/lib/spack/spack/cmd/diff.py
index 8d7b99e83475..8e69087fb356 100644
--- a/lib/spack/spack/cmd/diff.py
+++ b/lib/spack/spack/cmd/diff.py
@@ -4,26 +4,29 @@
 # SPDX-License-Identifier: (Apache-2.0 OR MIT)
 
 
+import argparse
+import os
 import sys
 
 import llnl.util.tty as tty
 from llnl.util.tty.color import cprint, get_color_when
 
 import spack.cmd
-import spack.cmd.common.arguments as arguments
 import spack.environment as ev
 import spack.solver.asp as asp
+import spack.spec
 import spack.util.environment
 import spack.util.spack_json as sjson
 
-description = "compare two specs"
+description = "compare two specs or lock files"
 section = "basic"
 level = "long"
 
 
 def setup_parser(subparser):
-    arguments.add_common_arguments(
-        subparser, ['specs'])
+    subparser.add_argument(
+        'args',
+        nargs=argparse.REMAINDER, help='two specs or environment lock files')
 
     subparser.add_argument(
         '--json',
@@ -57,37 +60,36 @@ def compare_specs(a, b, to_string=False, color=None):
     Arguments:
         a (spack.spec.Spec): the first spec to compare
         b (spack.spec.Spec): the second spec to compare
-        a_name (str): the name of spec a
-        b_name (str): the name of spec b
         to_string (bool): return an object that can be json dumped
-        color (bool): whether to format the names for the console
     """
-    if color is None:
-        color = get_color_when()
 
     # Prepare a solver setup to parse differences
     setup = asp.SpackSolverSetup()
 
-    a_facts = set(t for t in setup.spec_clauses(a, body=True, expand_hashes=True))
-    b_facts = set(t for t in setup.spec_clauses(b, body=True, expand_hashes=True))
+    a = [a] if isinstance(a, spack.spec.Spec) else a
+    b = [b] if isinstance(b, spack.spec.Spec) else b
+
+    a_facts, b_facts = [], []
+    for s in a:
+        a_facts.extend(
+            setup.spec_clauses(s, body=True, transitive=True, expand_hashes=True))
+    for s in b:
+        b_facts.extend(
+            setup.spec_clauses(s, body=True, transitive=True, expand_hashes=True))
+
+    a_facts = set(a_facts)
+    b_facts = set(b_facts)
 
     # We want to present them to the user as simple key: values
     intersect = sorted(a_facts.intersection(b_facts))
     spec1_not_spec2 = sorted(a_facts.difference(b_facts))
     spec2_not_spec1 = sorted(b_facts.difference(a_facts))
 
-    # Format the spec names to be colored
-    fmt = "{name}{@version}{/hash}"
-    a_name = a.format(fmt, color=color)
-    b_name = b.format(fmt, color=color)
-
     # We want to show what is the same, and then difference for each
     return {
         "intersect": flatten(intersect) if to_string else intersect,
         "a_not_b": flatten(spec1_not_spec2) if to_string else spec1_not_spec2,
         "b_not_a": flatten(spec2_not_spec1) if to_string else spec2_not_spec1,
-        "a_name": a_name,
-        "b_name": b_name,
     }
 
 
@@ -117,9 +119,6 @@ def print_difference(c, attributes="all", out=None):
     A = c['b_not_a']
     B = c['a_not_b']
 
-    cprint("@R{--- %s}" % c["a_name"])  # bright red
-    cprint("@G{+++ %s}" % c["b_name"])  # bright green
-
     # Cut out early if we don't have any differences!
     if not A and not B:
         print("No differences\n")
@@ -174,24 +173,58 @@ def group_by_type(diffset):
             cprint("@G{+  %s}" % addition.pop(0))
 
 
-def diff(parser, args):
-    env = ev.active_environment()
+def print_header(a, b):
+    cprint("@R{--- %s}" % a)
+    cprint("@G{+++ %s}" % b)
 
-    if len(args.specs) != 2:
-        tty.die("You must provide two specs to diff.")
 
-    specs = [spack.cmd.disambiguate_spec(spec, env, first=args.load_first)
-             for spec in spack.cmd.parse_specs(args.specs)]
+def _is_environment_comparison(args):
+    is_lock = lambda p: os.path.isfile(p) and '.lock' in os.path.basename(p)
+    return len(args) == 2 and is_lock(args[0]) and is_lock(args[1])
 
-    # Calculate the comparison (c)
+
+def diff(parser, args):
     color = False if args.dump_json else get_color_when()
+
+    # Try to read environment lock files
+    if _is_environment_comparison(args.args):
+        mode = 'env'
+        env_a = ev.Environment('.', init_file=args.args[0], with_view=False)
+        env_b = ev.Environment('.', init_file=args.args[1], with_view=False)
+        specs = [
+            [s for _, s in env_a.concretized_specs()],
+            [s for _, s in env_b.concretized_specs()]
+        ]
+    else:
+        mode = 'specs'
+        env = ev.active_environment()
+        specs = [spack.cmd.disambiguate_spec(spec, env, first=args.load_first)
+                 for spec in spack.cmd.parse_specs(args.args)]
+        # note that len(args.args) != len(specs) necessarily.
+        if len(specs) != 2:
+            tty.die("You must provide two specs to diff.")
+
+    # Calculate the comparison (c)
     c = compare_specs(specs[0], specs[1], to_string=True, color=color)
 
     # Default to all attributes
     attributes = args.attribute or ["all"]
 
+    # JSON output
     if args.dump_json:
         print(sjson.dump(c))
-    else:
-        tty.warn("This interface is subject to change.\n")
-        print_difference(c, attributes)
+        return
+
+    # Text output
+    if mode == 'env':
+        print_header(
+            os.path.abspath(os.path.realpath(args.args[0])),
+            os.path.abspath(os.path.realpath(args.args[1])))
+
+    elif mode == 'specs':
+        fmt = "{name}{@version}{/hash}"
+        print_header(
+            specs[0].format(fmt, color=color),
+            specs[1].format(fmt, color=color))
+
+    print_difference(c, attributes)
diff --git a/lib/spack/spack/test/cmd/diff.py b/lib/spack/spack/test/cmd/diff.py
index 48435df2a620..0704ceb065bd 100644
--- a/lib/spack/spack/test/cmd/diff.py
+++ b/lib/spack/spack/test/cmd/diff.py
@@ -3,11 +3,15 @@
 #
 # SPDX-License-Identifier: (Apache-2.0 OR MIT)
 
+import os
+
 import pytest
 
 import spack.cmd.diff
 import spack.config
+import spack.environment as ev
 import spack.main
+import spack.spec
 import spack.store
 import spack.util.spack_json as sjson
 
@@ -64,9 +68,6 @@ def test_load_first(install_mockery, mock_fetch, mock_archive, mock_packages):
     assert not result['a_not_b']
     assert not result['b_not_a']
 
-    assert 'mpileaks' in result['a_name']
-    assert 'mpileaks' in result['b_name']
-
     # spot check attributes in the intersection to ensure they describe the spec
     assert "intersect" in result
     assert all(["node", dep] in result["intersect"] for dep in (
@@ -110,3 +111,24 @@ def test_load_first(install_mockery, mock_fetch, mock_archive, mock_packages):
 
     assert ['hash', 'mpileaks %s' % no_debug_hash] in result['b_not_a']
     assert ['variant_value', 'mpileaks debug False'] in result['b_not_a']
+
+
+def test_environment_lock_files(tmpdir, mock_packages, config):
+    env_a_dir = str(tmpdir.ensure('env_a', dir=True))
+    env_a = ev.Environment(env_a_dir, with_view=False)
+    env_a.add('zlib@1.2.11')
+    env_a.concretize()
+    env_a.write()
+    env_a_lock = os.path.join(env_a_dir, 'spack.lock')
+
+    env_b_dir = str(tmpdir.ensure('env_b', dir=True))
+    env_b = ev.Environment(env_b_dir, with_view=False)
+    env_b.add('zlib@1.2.8')
+    env_b.concretize()
+    env_b.write()
+    env_b_lock = os.path.join(env_b_dir, 'spack.lock')
+
+    out = diff_cmd(env_a_lock, env_b_lock)
+
+    assert '-  zlib 1.2.11' in out
+    assert '+  zlib 1.2.8' in out
diff --git a/share/spack/spack-completion.bash b/share/spack/spack-completion.bash
index e9022d47bbde..bf01b4ee1746 100755
--- a/share/spack/spack-completion.bash
+++ b/share/spack/spack-completion.bash
@@ -886,7 +886,7 @@ _spack_diff() {
     then
         SPACK_COMPREPLY="-h --help --json --first -a --attribute"
     else
-        _all_packages
+        SPACK_COMPREPLY=""
     fi
 }
 
